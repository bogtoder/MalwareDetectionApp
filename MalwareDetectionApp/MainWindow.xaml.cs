using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using MalwareDetectionApp.Services;
using System.Windows;
using System.Windows.Forms;
using System.Windows.Input;
using MessageBox = System.Windows.MessageBox;
using WinForms = System.Windows.Forms;
using MalwareDetectionApp.DTOs;
using System;
using Button = System.Windows.Controls.Button;
using System.Linq;
using System.Drawing;
using System.IO;

namespace MalwareDetectionApp
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow
    {
        private NotifyIcon notifyIcon;


        public ObservableCollection<UIFileScanResult> PossibleInfectedFilesList { get; }
        public ObservableCollection<UIFileScanResult> UninfectedFilesList { get; set; }
        public ObservableCollection<string> ExclusionList { get; set; }

        public ObservableCollection<string> TrackedDirectoriesList { get; set; }

        private readonly ScannerManagementService _scannerManagementService;

        public MainWindow()
        {
            InitializeComponent();
            PossibleInfectedFilesList = new ObservableCollection<UIFileScanResult>();
            UninfectedFilesList = new ObservableCollection<UIFileScanResult>();
            ExclusionList = new ObservableCollection<string>();
            TrackedDirectoriesList = new ObservableCollection<string>();

            PossibleInfectedFiles.ItemsSource = PossibleInfectedFilesList;
            UninfectedFiles.ItemsSource = UninfectedFilesList;
            Exclusion.ItemsSource = ExclusionList;
            TrackedDirectories.ItemsSource = TrackedDirectoriesList;

            _scannerManagementService = new ScannerManagementService(
                PossibleInfectedFilesList,
                UninfectedFilesList,
                ExclusionList,
                TrackedDirectoriesList);

            notifyIcon = new NotifyIcon
            {
                Icon = new Icon("icons8-virus-free-96.ico"),
                Visible = false
            };
            notifyIcon.DoubleClick += (s, args) => ShowMainWindow();
        }

        private void ShowMainWindow()
        {
            Show();
            WindowState = WindowState.Normal;
            notifyIcon.Visible = false;
        }

        protected override void OnStateChanged(EventArgs e)
        {
            if (WindowState == WindowState.Minimized)
            {
                Hide();
                notifyIcon.Visible = true;
            }
            base.OnStateChanged(e);
        }

        protected override void OnClosing(CancelEventArgs e)
        {

            base.OnClosing(e);

        }

        private void StartTracking_Click(object sender, RoutedEventArgs e)
        {
            using FolderBrowserDialog dialog = new();

            var result = dialog.ShowDialog();
            if (result == WinForms.DialogResult.OK)
            {
                var targetDirectory = dialog.SelectedPath;

                _scannerManagementService.StartNewTracker(targetDirectory);
            }
        }

        private void MainWindow_Closing(object sender, CancelEventArgs e)
        {
            var result = MessageBox.Show("Are you sure you want to exit?", "Confirm Exit", MessageBoxButton.YesNo, MessageBoxImage.Question);
            if (result == MessageBoxResult.No)
            {
                e.Cancel = true;
            }
            else
            {
                _scannerManagementService.Dispose();
            }
        }

        private void FilesList_MouseDoubleClick_GotoFile(object sender, MouseButtonEventArgs e)
        {
            var filePath = "";

            if (PossibleInfectedFiles.SelectedItem != null)
            {
                filePath = (PossibleInfectedFiles.SelectedItem as UIFileScanResult)!.FilePath;
            }

            else if (UninfectedFiles.SelectedItem != null)
            {
                filePath = (UninfectedFiles.SelectedItem as UIFileScanResult)!.FilePath;
            }

            if (!string.IsNullOrWhiteSpace(filePath))
            {
                Process.Start("explorer.exe", $"/select,\"{filePath}\"");
            }
        }

        private void Button_Click_RescanFile(object sender, RoutedEventArgs e)
        {
            try
            {
                var filePath = ((UIFileScanResult)((Button)sender).DataContext).FilePath;

                var exists = PossibleInfectedFilesList.FirstOrDefault(x => x.FilePath == filePath);
                if (exists != null)
                {
                    PossibleInfectedFilesList.Remove(exists);
                }
                else
                {
                    exists = UninfectedFilesList.FirstOrDefault(x => x.FilePath == filePath);
                    UninfectedFilesList.Remove(exists!);
                }

                _scannerManagementService.RescanFile(filePath);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void Button_Click_DeleteFile(object sender, RoutedEventArgs e)
        {
            try
            {
                var filePath = ((UIFileScanResult)((Button)sender).DataContext).FilePath;

                var fileData = PossibleInfectedFilesList.FirstOrDefault(x => x.FilePath == filePath);
                if (fileData != null)
                {
                    PossibleInfectedFilesList.Remove(fileData);
                    File.Delete(filePath);

                    File.ReadAllBytes(filePath);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void Button_Click_ExcludeFile(object sender, RoutedEventArgs e)
        {
            try
            {
                var filePath = ((UIFileScanResult)((Button)sender).DataContext).FilePath;

                var fileData = PossibleInfectedFilesList.FirstOrDefault(x => x.FilePath == filePath);
                if (fileData != null)
                {
                    PossibleInfectedFilesList.Remove(fileData);
                }

                ExclusionList.Add(filePath);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void Button_Click_ExcludeDirectory(object sender, RoutedEventArgs e)
        {
            try
            {
                var directoryPath = ((Button)sender).DataContext.ToString();

                TrackedDirectoriesList.Remove(directoryPath!);
                ExclusionList.Add(directoryPath!);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void Button_Click_RemoveFromExcluded(object sender, RoutedEventArgs e)
        {
            try
            {
                var path = ((Button)sender).DataContext.ToString();
                ExclusionList.Remove(path!);

                if(Directory.Exists(path))
                {
                    _scannerManagementService.StartNewTracker(path!);
                }
                else
                {
                    _scannerManagementService.RescanFile(path!);
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
    }
}