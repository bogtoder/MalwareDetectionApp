using MalwareDetectionApp.DTOs;
using MalwareDetectionApp.DTOs.Enums;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;

namespace MalwareDetectionApp.Services
{
    public class ScannerManagementService: IDisposable
    {
        private readonly string scannedFilesDB;
        private readonly string trackedPathsDB;
        private readonly string excludedFilesDB;

        private ObservableCollection<string> _trackedDirectoriesList;
        private ObservableCollection<string> _excludedDirectoriesList;

        private Scanner _scanner;

        public ScannerManagementService(
            ObservableCollection<UIFileScanResult> possibleInfectedFiles,
            ObservableCollection<UIFileScanResult> uninfectedFiles,
            ObservableCollection<string> excludedFiles,
            ObservableCollection<string> trackedDirectoriesList)
        {
            scannedFilesDB = Path.Combine(Environment.CurrentDirectory, "scanned.csv");
            trackedPathsDB = Path.Combine(Environment.CurrentDirectory, "targetDirectoriesDB.txt");
            excludedFilesDB = Path.Combine(Environment.CurrentDirectory, "excludedFilesDB.txt");

            _trackedDirectoriesList = trackedDirectoriesList;
            _excludedDirectoriesList = excludedFiles;

            _scanner = new Scanner(scannedFilesDB, possibleInfectedFiles, uninfectedFiles, excludedFiles);

            LoadBackupAndRestartExistingTrackers(possibleInfectedFiles, uninfectedFiles, excludedFiles);
        }

        public void StartNewTracker(string targetDirectory)
        {
            if (string.IsNullOrEmpty(targetDirectory))
                return;

            if (_trackedDirectoriesList.Contains(targetDirectory))
                return;

            _trackedDirectoriesList.Add(targetDirectory);

            _scanner.StartTracking(targetDirectory);
            _scanner.ScanDirectory(targetDirectory);
        }

        private void LoadBackupAndRestartExistingTrackers(
            ObservableCollection<UIFileScanResult> possibleInfectedFiles,
            ObservableCollection<UIFileScanResult> uninfectedFiles,
            ObservableCollection<string> excludedFiles)
        {
            if (File.Exists(trackedPathsDB))
            {
                foreach (var trackedPath in File.ReadAllLines(trackedPathsDB))
                {
                    if(Directory.Exists(trackedPath))
                    { 
                        _trackedDirectoriesList.Add(trackedPath);
                    }
                }
            }

            if (File.Exists(scannedFilesDB))
            {
                foreach (var storedFileScanResult in File.ReadAllLines(scannedFilesDB))
                {
                    var fileScanResult = GetSavedFileScanResult(storedFileScanResult);

                    if (fileScanResult.ScanResult.First().Malware == MalwareType.None)
                    {
                        uninfectedFiles.Add(fileScanResult);
                    }
                    else
                    {
                        possibleInfectedFiles.Add(fileScanResult);
                    }
                }
            }

            if(File.Exists(excludedFilesDB))
            {
                foreach (var excludedPath in File.ReadAllLines(excludedFilesDB))
                {
                    excludedFiles.Add(excludedPath);
                }
            }

            foreach (var existingTarget in _trackedDirectoriesList)
            {
                _scanner.StartTracking(existingTarget);
            }
        }

        public void RescanFile(string filePath)
        {
            try
            {
                _scanner.ScanFileAndUpdateLists(filePath);
            }
            catch
            {
                throw;
            }
        }

        private UIFileScanResult GetSavedFileScanResult(string storedFileInfo)
        {
            var elements = storedFileInfo.Split(' ');
            var filePath = elements[0];

            var scanResults = new List<(MalwareType Malware, float Confidence)>();
            
            for(var i = 1; i < elements.Length; i++)
            {

                // each item is a pair of malwareId:confidence

                var itemData = elements[i].Split(":");
                var malwareId = int.Parse(itemData[0]);
                var confidence = float.Parse(itemData[1]);

                scanResults.Add(((MalwareType)malwareId, confidence));
            }

            return new UIFileScanResult
            {
                FilePath = filePath,
                ScanResult = scanResults
            };
        }

        public void Dispose()
        {
            var streamWriter = File.CreateText(trackedPathsDB);

            foreach (var file in _trackedDirectoriesList)
            {
                streamWriter.WriteLine(file.ToString());
            }
            streamWriter.Close();
            streamWriter.Dispose();

            streamWriter = File.CreateText(excludedFilesDB);

            foreach (var file in _excludedDirectoriesList)
            {
                streamWriter.WriteLine(file.ToString());
            }
            streamWriter.Close();
            streamWriter.Dispose();

            _scanner.Dispose();
        }
    }
}
